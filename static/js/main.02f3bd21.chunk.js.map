{"version":3,"sources":["LogoTicket.svg","components/MovieListItem/MovieListItem.js","components/ComboSelector.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieListItem","str","substring","className","src","this","props","moviePoster","movieName","truncate","movieDesc","React","Component","ComboSelector","state","activeSort","showMenu","toggleMenu","bind","changeSort","setState","sortType","sortTypeTidy","throw","onClick","style","display","menuList","map","val","i","key","messy","tidy","App","fetchAPI","url","page_start","page_end","sort_method","_callback","response","Http","XMLHttpRequest","timeout","ontimeout","console","log","open","send","onreadystatechange","e","responseText","concat","JSON","parse","results","movieList","searchResponse","searchActorResponse","index","sortMethod","throwURL","updateSortMethod","quickSearch","searchActor","res","query","target","value","undefined","formattedResponse","slice","title","name","actorResponse","known_for_department","gender","id","Logo","type","placeholder","onChange","onFocus","showResults","onBlur","length","item","release_date","overview","movieActive","poster_path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02f3bd21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LogoTicket.505863ed.svg\";","import React from 'react';\r\n\r\nexport default class MovieListItem extends React.Component {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    truncate(str) {\r\n        return str.substring(0, 256) + \"...\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"movieItem\">\r\n                <img className=\"moviePoster\" src={this.props.moviePoster} />\r\n                <div className=\"movieDescription\">\r\n                    <h3>{this.props.movieName}</h3>\r\n                    <p>{this.truncate(this.props.movieDesc)}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n} ","import React from 'react';\r\n\r\nexport default class ComboSelector extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            activeSort: 'Popularity',\r\n            showMenu: false\r\n        }\r\n        this.toggleMenu = this.toggleMenu.bind(this);\r\n        this.changeSort = this.changeSort.bind(this);\r\n    }\r\n\r\n    toggleMenu() {\r\n        this.setState({\r\n            showMenu: !this.state.showMenu\r\n        })\r\n    }\r\n\r\n    changeSort(sortType, sortTypeTidy) {\r\n        this.props.throw(sortType);\r\n        this.setState({\r\n            activeSort: sortTypeTidy\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"comboSelector\" onClick={this.toggleMenu}>\r\n                Sort by: {this.state.activeSort}\r\n                <div className=\"comboSelector-menu\" style={{display: this.state.showMenu ? 'block' : 'none'}}>\r\n                    {this.props.menuList.map((val, i) => {\r\n                        return <div key={\"combo\" + i} className=\"comboSelector-menu-item\" onClick={() => this.changeSort(val.messy, val.tidy)}>{val.tidy}</div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n} ","import React from 'react';\nimport MovieListItem from './components/MovieListItem/MovieListItem'\nimport './App.css';\nimport Logo from '../src/LogoTicket.svg';\nimport ComboSelector from '../src/components/ComboSelector';\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      movieList: [],\n      searchResponse: [],\n      searchActorResponse: [],\n      index: 0,\n      sortMethod: \"revenue.desc\"\n    }\n    this.fetchAPI = this.fetchAPI.bind(this);\n    this.throwURL = this.throwURL.bind(this);\n    this.updateSortMethod = this.updateSortMethod.bind(this);\n    this.quickSearch = this.quickSearch.bind(this);\n    this.searchActor = this.searchActor.bind(this);\n  }\n\n  componentDidMount() {\n    this.throwURL(0);\n  }\n\n  updateSortMethod(val) {\n    this.setState({\n      sortMethod: val\n    }, () => this.throwURL());\n  }\n\n  throwURL() {\n    this.fetchAPI(`https://api.themoviedb.org/3/discover/movie`, 1, 2, this.state.sortMethod, res => {\n      this.setState({\n        movieList: res\n      });\n    });\n  }\n\n  fetchAPI = (url, page_start, page_end, sort_method, _callback) => {\n    let response = [];\n    while(page_start <= page_end) {\n    const Http = new XMLHttpRequest();\n    url = url + \"?api_key=793404c73efcad0fa53d5f53f793021f\";\n    url = url + \"&page=\" + page_start;\n    url = url + \"&sort_by=\" + sort_method;\n    //Ensure that the request doesnt get stuck loading\n    Http.timeout = 5000;\n    Http.ontimeout = () => {\n      console.log('This request is taking too long!');\n    }\n    //Open request\n    Http.open(\"GET\", url, true);\n    Http.send();\n    //Request recieved, process:\n    Http.onreadystatechange = e => {\n      if(Http.responseText) {\n      response = response.concat(JSON.parse(Http.responseText).results);\n      this.setState({movieList: response})\n      }\n    }\n    page_start++;\n  }\n  };\n\n  quickSearch(e) {\n    let response = [];\n    let query = e.target.value;\n    const Http = new XMLHttpRequest();\n    let url = \"https://api.themoviedb.org/3/search/movie\";\n    url = url + \"?api_key=793404c73efcad0fa53d5f53f793021f\";\n    url = url + \"&query=\" + query;\n    //Ensure that the request doesnt get stuck loading\n    Http.timeout = 5000;\n    Http.ontimeout = () => {\n      console.log('This request is taking too long!');\n    }\n    //Open request\n    Http.open(\"GET\", url, true);\n    Http.send();\n    //Request recieved, process:\n    Http.onreadystatechange = e => {\n      if(Http.responseText) {\n        //console.log(Http.responseText);\n      response = JSON.parse(Http.responseText).results;\n      if(response != undefined) {\n        let formattedResponse = response.slice(0, 5).map((val, index) => {\n            return <dd key={\"movie\" + index}>{val.title}</dd>;\n        });\n        this.setState({searchResponse: formattedResponse});\n        this.searchActor(query);\n      }else{\n        this.setState({searchResponse: []});\n      }\n    }\n  }\n  }\n\n  searchActor(name) {\n    const Http = new XMLHttpRequest();\n    let url = \"https://api.themoviedb.org/3/search/person\";\n    url = url + \"?api_key=793404c73efcad0fa53d5f53f793021f\";\n    url = url + \"&query=\" + name;\n    //Ensure that the request doesnt get stuck loading\n    Http.timeout = 5000;\n    Http.ontimeout = () => {\n      console.log('This request is taking too long!');\n    }\n    //Open request\n    Http.open(\"GET\", url, true);\n    Http.send();\n    //Request recieved, process:\n    Http.onreadystatechange = e => {\n      if(Http.responseText) {\n      let actorResponse = JSON.parse(Http.responseText).results;\n      if(actorResponse != undefined) {\n        let formattedResponse = actorResponse.slice(0, 5).map((val, index) => {\n            if(val.known_for_department == \"Acting\" && val.gender != 0)\n            return <dd key={\"Actor\" + index}>{val.name}</dd>;\n        });\n        this.setState({searchActorResponse: formattedResponse});\n      }else{\n        this.setState({searchActorResponse: []});\n      }\n    }\n  }\n  }\n\n  render() {\n    return (\n      <div>\n        <nav id=\"movieResults-nav\">\n          <img src={Logo} id=\"logo\"/>\n          <div id=\"search-bar-section\">\n            <input id=\"search-bar\" type=\"text\" placeholder=\"Find something...\" onChange={(e) => this.quickSearch(e)} onFocus={() => this.setState({showResults: true})} onBlur={() => this.setState({showResults: false})}/>\n            <div id=\"search-bar-results\" style={{display: this.state.showResults ? 'block': 'none'}}>\n            <dl>\n              <dt style={{display: this.state.searchResponse.length > 0 ? 'block' : 'none'}}>Movies</dt>\n              {\n                this.state.searchResponse\n              }\n              <dt style={{display: this.state.searchActorResponse.length > 0 ? 'block' : 'none'}}>Actors</dt>\n              {\n                this.state.searchActorResponse\n              }\n            </dl>\n            </div>\n          </div>\n        </nav>\n        <nav id=\"movieResults-sort\">\n          <ComboSelector throw={this.updateSortMethod} menuList={[{tidy:\"Popularity\", messy: \"popularity.desc\"}, {tidy:\"Release Date\", messy: \"release_date.desc\"}, {tidy:\"Revenue\", messy: \"revenue.desc\"}, {tidy:\"Votes\", messy: \"vote_count.desc\"}, {tidy:\"Vote Average\", messy: \"vote_average.desc\"}]} />\n        </nav>\n        <main className=\"movieResults\">\n          {this.state.movieList.map((item, i) => {\n            return <MovieListItem key={\"MovieList\" + i} movieName={item.title + \" (\" + item.release_date.substring(0, 4) + \")\"} movieDesc={item.overview} movieActive={i == 0} moviePoster={`https://image.tmdb.org/t/p/w400${item.poster_path}`}/>\n          })}\n        </main>\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}